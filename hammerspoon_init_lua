HYPER = {'ctrl', 'shift', 'alt', 'cmd'}
ctrl_option_command = {'ctrl', 'alt', 'cmd'}

-- tell hammerspoon to automatically launch on login
hs.autoLaunch(true)

hs.loadSpoon("SpoonInstall")

spoon.SpoonInstall.repos.ShiftIt = {
   url = "https://github.com/peterklijn/hammerspoon-shiftit",
   desc = "ShiftIt spoon repository",
   branch = "master",
}

spoon.SpoonInstall:andUse("ShiftIt", { repo = "ShiftIt" })
spoon.ShiftIt:bindHotkeys({})

spoon.SpoonInstall:andUse("ReloadConfiguration", {})
spoon.ReloadConfiguration:bindHotkeys({
  reloadConfiguration = {ctrl_option_command, "r"}
})
spoon.SpoonInstall:andUse("Calendar", {})
-- spoon.SpoonInstall:andUse("HCalendar", {})
-- spoon.ReloadConfiguration:start()


-- https://www.hammerspoon.org/Spoons/ClipboardTool
function setUpClipboardTool()
  spoon.SpoonInstall:andUse("ClipboardTool", {})
  -- ClipboardTool:start()
  spoon.ClipboardTool.paste_on_select = true
  spoon.ClipboardTool.show_in_menubar = false
  spoon.ClipboardTool.max_size = true
  spoon.ClipboardTool.max_entry_size = 4990
  spoon.ClipboardTool.clearAll()
  -- showHelp()

  -- defaults to 0.8, but that seems kind of often to check
  spoon.ClipboardTool.frequency = 2

  spoon.ClipboardTool:bindHotkeys({
    toggle_clipboard = {ctrl_option_command, "v"}
  })
  spoon.ClipboardTool:start()
end

function showHelp()
  local helpText = [[
Hammerspoon Hotkeys:

HYPER = Ctrl + Shift + Alt + Cmd
CtrlOptCmd = Ctrl + Alt + Cmd

--- General ---
CtrlOptCmd + r : Reload Hammerspoon Config
CtrlOptCmd + h : Show this help
HYPER + h      : Show this help
HYPER + 0      : Restart System
HYPER + r      : Toggle Display Mirroring

--- Applications & Tabs ---
HYPER + i : Switch to iTerm
HYPER + m : Switch to Mail (Chrome Tab 1)
HYPER + s : Switch to Slack (Chrome Tab 2)
HYPER + c : Switch to Calendar (Chrome Tab 4)
HYPER + k : Switch to Karma (Chrome Tab 5)
HYPER + b : Open Agile Board (Chrome Search)

--- Clipboard & Typing ---
CtrlOptCmd + v : Toggle Clipboard History
HYPER + v      : Clean clipboard text & paste
HYPER + o      : Type {code}
HYPER + d      : Type 'du -sh * | sort -h'
HYPER + l      : Type 'sudo .../clean-binlogs.sh test'
HYPER + y      : Type 'sudo mysql --defaults-file=...'

--- Other ---
CtrlOptCmd + j : Run notification dismissal script
]]
  -- Show the alert for 30 seconds instead of the default 5
  hs.alert.show(helpText, 30)
end

-- Main

-- function from here:
-- https://msol.io/blog/tech/work-more-efficiently-on-your-mac-for-developers/

setUpClipboardTool()

-- use vimium's search tab feature (T) to find the first chrome tab matching the term "Agile Board"
hs.hotkey.bindSpec({ HYPER, "b" },
  function()
    hs.notify.show("Hello World!", "Welcome to Agile Board", "")
    hs.application.launchOrFocus("Google Chrome")

    -- a random tab that will allow us to use vimium's search tab feature
    hs.eventtap.keyStroke("cmd", "5")

    hs.eventtap.keyStroke({}, "escape")
    hs.eventtap.keyStroke("shift", "t")

    hs.eventtap.keyStrokes("Agile Board")
    hs.timer.doAfter(0.1,
      function ()
        hs.eventtap.keyStroke({}, "return")
      end
    )
  end
)

-- "paste" command and output without the extra unpretty stuff from the prompt
hs.hotkey.bindSpec({ HYPER, "v" },
  function()
    hs.notify.show("Hello World!", "updating clipboard text for pasting command and output", "")
    local selectedText = hs.pasteboard.getContents()
    local updatedText = string.gsub(selectedText, ".*> ", "> ")
    hs.pasteboard.setContents(updatedText)
    -- why doAfter? https://githubmemory.com/repo/Hammerspoon/hammerspoon/issues/2889
    hs.timer.doAfter(0.5,
      function ()
        hs.eventtap.keyStroke("cmd", "v")
      end
    )
    hs.notify.show("Hello World!", "doing it. updating clipboard text for pasting command and output", "")
  end
)

-- mail is in chrome tab 1
hs.hotkey.bindSpec({ HYPER, "m" },
  function()
    hs.notify.show("Hello World!", "Welcome to mail", "")
    hs.application.launchOrFocus("Google Chrome")
    hs.eventtap.keyStroke("cmd", "1")
  end
)

-- slack is in chrome tab 2
hs.hotkey.bindSpec({ HYPER, "s" },
  function()
    hs.notify.show("Hello World!", "Welcome to slack", "")
    hs.application.launchOrFocus("Google Chrome")
    hs.eventtap.keyStroke("cmd", "2")
  end
)

-- calendar is in chrome tab 4
hs.hotkey.bindSpec({ HYPER, "c" },
  function()
    hs.notify.show("Hello World!", "Welcome to calendar", "")
    hs.application.launchOrFocus("Google Chrome")
    hs.eventtap.keyStroke("cmd", "4")
  end
)

-- karma is in chrome tab 5
hs.hotkey.bindSpec({ HYPER, "k" },
  function()
    hs.notify.show("Hello World!", "Welcome to karma", "")
    hs.application.launchOrFocus("Google Chrome")
    hs.eventtap.keyStroke("cmd", "5")
  end
)

hs.hotkey.bindSpec({ HYPER, "i" },
  function()
    hs.notify.show("Hello World!", "Welcome to iterm", "")
    hs.application.launchOrFocus("iTerm")
  end
)
hs.hotkey.bindSpec({ ctrl_option_command, "h" },
  showHelp
)

hs.hotkey.bindSpec({ HYPER, "h" },
  showHelp
)

-- mirror displays
hs.hotkey.bindSpec({ HYPER, "r" },
  function()
    -- hs.screen.allScreens()[0].id
    local all_screens = hs.screen.allScreens()
    if #all_screens ~= 1 then
      hs.alert.show("More than one screen detected!\nNot in mirrored mode?")
      -- hs.alert.show(all_screens[1])
      -- hs.alert.show(all_screens[2])

      -- hs.screen.mirrorOf(all_screens[1], all_screens[2])
      -- 1 is the primary macbook screen
      if all_screens[2].mirrorOf(all_screens[2], all_screens[1]) then
        hs.alert.show('turned on mirroring')
      else
        hs.alert.show('failed to turn on mirroring')
      end
    else
      -- it doesn't make sense to me that you have to pass the screen twice (caller and param). feels like a bug. to investigate, see:
      -- https://www.hammerspoon.org/docs/hs.screen.html#mirrorOf
      -- https://github.com/Hammerspoon/hammerspoon/blob/master/extensions/screen/libscreen.m#L1117
      if all_screens[1].mirrorStop(all_screens[1]) then
        hs.alert.show('successfully called mirrorStop')
      else
        hs.alert.show('failed when calling mirrorStop')
      end
      -- screen1.mirrorStop()
    end

    return

    -- local screen1 = hs.screen.primaryScreen()
    -- hs.alert.show(screen1.id)
    -- local screen2 = screen1.next()
    -- hs.alert.show("next")
    -- hs.alert.show(screen2.id)
    -- if screen1 == screen2 then
    --   screen1.mirrorStop()
    -- else
    --   screen1.mirrorOf(screen2)
    -- end
  end
)

-- macro to type {code} in jira
hs.hotkey.bindSpec({ HYPER, "o" },
  function()
    hs.eventtap.keyStrokes("{code}")
  end
)

-- macro to type the following: du -sh * | sort -h
hs.hotkey.bindSpec({ HYPER, "d" },
  function()
    hs.eventtap.keyStrokes("du -sh * | sort -h")
  end
)

-- macro to type the following: sudo /usr/local/scripts/MySQL/Scripts/clean-binlogs.sh test
hs.hotkey.bindSpec({ HYPER, "l" },
  function()
    hs.eventtap.keyStrokes("sudo /usr/local/scripts/MySQL/Scripts/clean-binlogs.sh test")
  end
)

-- macro to type the following: mysql --defaults-file=/etc/mysql/myadmin.cnf
hs.hotkey.bindSpec({ HYPER, "y" },
  function()
    hs.eventtap.keyStrokes("sudo mysql --defaults-file=/etc/mysql/myadmin.cnf")
  end
)

hs.hotkey.bindSpec({ ctrl_option_command, "j" },
  function()
    successful_execute_result = os.execute(os.getenv("HOME") .. "/projects/github/computer-setup/respond_to_mac_notifications.js")

    -- i'm hoping os.execute returns a boolean like this
    if successful_execute_result then
      hs.notify.show("nailed it", "removed notification", "")
    else
      hs.notify.show("OH NO!", "DID NOT remove notification", "")
    end
  end
)

-- https://github.com/Hammerspoon/hammerspoon/issues/834 talks about keyboard shortcut to restart
hs.hotkey.bindSpec({ HYPER, "0" },
  function()
    hs.caffeinate.restartSystem()
  end
)

hs.alert.show("Hammerspoon config loaded")
